head(ex.data.3)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
data(ex.data.3)
lcart.mod1 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3,
start=c(10,5))
summary(lcart.mod1)
plot(lcart.mod1)
lrp2Plot(lcart.mod1)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
lcart.mod0 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3[1:30,],
start=c(10,5))
data(ex.data.3)
lcart.mod0 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3[1:30,],
start=c(10,5))
lcart.mod0 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3[1:20,],
start=c(10,5))
library(longRPart2)
lcart.mod1 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3,
start=c(10,5))
data("ex.data.3")
lcart.mod1 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.3,
start=c(10,5))
save.image("example.RData")
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
save(lcart.mod1,"example.RData")
?save
save(lcart.mod1,file="example.RData")
library(longRPart2)
library(longRPart2)
data("example")
lcart.mod1
data("ex.data.3")
ex.data.3
?data
library(longRPart2)
library(longRPart2)
library(devtools)
?use_data
devtools::use_data(example)
library(longRPart2)
library(longRPart2)
str(example)
str(example.rds)
devtools::use_data(lcart.mod1)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
z = runif(200, 0, 10)
b0i = matrix(NA,200,1)
b1i = matrix(NA,200,1)
y = matrix(NA,200,6)
id = matrix(NA,200,1)
beta_0 = matrix(NA,200,1)
beta_1 = matrix(NA,200,1)
psi2_0 = matrix(NA,200,1)
psi2_1 = matrix(NA,200,1)
sigma2_u = matrix(NA,200,1)
for(i in 1:200){
if (z[i] > 5) {beta_0[i]   = 10}  else {beta_0[i]   = 20}
if (z[i] > 5) {beta_1[i]   = 10}  else {beta_1[i]   = 5}
if (z[i] > 5) {psi2_0[i]   = 100} else {psi2_0[i]   = 64}
if (z[i] > 5) {psi2_1[i]   = 25}  else {psi2_1[i]   = 16}
if (z[i] > 5) {sigma2_u[i] = 4}   else {sigma2_u[i] = 4}
b0i[i] = beta_0[i] + rnorm(1,0,sqrt(psi2_0[i]))
b1i[i] = beta_1[i] + rnorm(1,0,sqrt(psi2_1[i]))
id[i] = i
for(t in 1:6){
y[i,t] = b0i[i] + b1i[i] * (t - 1)/5 + rnorm(1,0,sqrt(sigma2_u))
}
}
ex.data.1 = as.data.frame(cbind(id,y,z))
names(ex.data.1)= c('id','y1','y2','y3','y4','y5','y6','z')
head(ex.data.1)
# Convert to Long Form
ex.data.2 = reshape(ex.data.1, idvar='id',
varying=c('y1','y2','y3','y4','y5','y6'),
times=c(0,1,2,3,4,5),
v.names='y', direction='long')
ex.data.2 = ex.data.2[order(ex.data.2$id, ex.data.2$time),]
head(ex.data.2)
lcart.mod1 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
library(longRPart2)
library(longRPart2)
setwd("/Users/rjacobuc/Documents/GitHub/longRPart2_scripts")
ECLSK_1000 = read.table("Subset1000_READING_PREDICTORS_AGE.dat",
na.strings = ".")
colnames(ECLSK_1000) = c("CHILDID",
"AGE",
"OCCASION",
"GENDER",
"W1POVRTY",
"RACE",
"P1FIRKDG",
"C1FMOTOR",
"C1GMOTOR",
"T1CONTRO" ,
"T1INTERP",
"T1EXTERN" ,
"T1INTERN",
"READING")
#GENDER 1 is MALE
#RACE: 1 white non-hispanic, 2 black or af. am., 3 hispanic race specified, 4 hispanic race not specified
#Clean data: delete NAs in AGE and READING, and make sure at least ONE predictor has a value.
ECLSK_1000$RACE = as.factor(ECLSK_1000$RACE)
ECLSK_1000_noNA = ECLSK_1000
ECLSK_1000_noNA$age_5 = ECLSK_1000_noNA$AGE-5
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$GENDER),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$W1POVRTY),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1GMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$P1FIRKDG),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1FMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1CONTRO),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERP),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1EXTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$RACE),]
#Split TRAINING vs TESTING
#TRAINING = ECLSK_1000_noNA[0:2500,]
#TESTING = ECLSK_1000_noNA[2501:3061,]
TRAINING = ECLSK_1000_noNA
LONGTREEResults = lrp(method="nlme",
nlme.model=READING~b0i+b1i*(1-exp(-b2*age_5)),
fixedFormula=b0i+b1i+b2~1,
rPartFormula = ~ GENDER + RACE,
group= ~ CHILDID,
randomFormula=b0i+b1i~1,
data=TRAINING,
min.dev=5,
start=c(-2,4,1))
LONGTREEResults$rpart_out
summary(LONGTREEResults)
plot(LONGTREEResults$nlmeModel)
lrp2Plot(LONGTREEResults)
lrp2Plot(LONGTREEResults,smooth_method="loess")
lrpPlot(LONGTREEResults)
lrpTreePlot(LONGTREEResults)
?text
library(longRPart2)
lrpTreePlot(LONGTREEResults)
library(longRPart2)
lrpTreePlot(LONGTREEResults)
?plot.nls
library(longRPart2)
lrpTreePlot(LONGTREEResults)
LONGTREEResults2 = lrp2function(method="nlme",
nlme.model=READING~b0i+b1i*(1-exp(-b2*age_5)),
fixedFormula=b0i+b1i+b2~1,
rPartFormula = ~ GENDER + RACE,
group= ~ CHILDID,
randomFormula=b0i+b1i~1,
data=TRAINING,
start=c(-2,4,1),
min.dev = 20)
z = runif(200, 0, 10)
b0i = matrix(NA,200,1)
b1i = matrix(NA,200,1)
y = matrix(NA,200,6)
id = matrix(NA,200,1)
beta_0 = matrix(NA,200,1)
beta_1 = matrix(NA,200,1)
psi2_0 = matrix(NA,200,1)
psi2_1 = matrix(NA,200,1)
sigma2_u = matrix(NA,200,1)
for(i in 1:200){
if (z[i] > 5) {beta_0[i]   = 10}  else {beta_0[i]   = 20}
if (z[i] > 5) {beta_1[i]   = 10}  else {beta_1[i]   = 5}
if (z[i] > 5) {psi2_0[i]   = 100} else {psi2_0[i]   = 64}
if (z[i] > 5) {psi2_1[i]   = 25}  else {psi2_1[i]   = 16}
if (z[i] > 5) {sigma2_u[i] = 4}   else {sigma2_u[i] = 4}
b0i[i] = beta_0[i] + rnorm(1,0,sqrt(psi2_0[i]))
b1i[i] = beta_1[i] + rnorm(1,0,sqrt(psi2_1[i]))
id[i] = i
for(t in 1:6){
y[i,t] = b0i[i] + b1i[i] * (t - 1)/5 + rnorm(1,0,sqrt(sigma2_u))
}
}
ex.data.1 = as.data.frame(cbind(id,y,z))
names(ex.data.1)= c('id','y1','y2','y3','y4','y5','y6','z')
head(ex.data.1)
# Convert to Long Form
ex.data.2 = reshape(ex.data.1, idvar='id',
varying=c('y1','y2','y3','y4','y5','y6'),
times=c(0,1,2,3,4,5),
v.names='y', direction='long')
ex.data.2 = ex.data.2[order(ex.data.2$id, ex.data.2$time),]
head(ex.data.2)
### Beginning of what package would be
## Things to Specify
#1 longitudinal model (e.g., y~b0i+b1i*(time/5))
#2 fixed-effect parameters (e.g., fixed=b0i+b1i~1)
#3 random-effect parameters (e.g., random=b0i+b1i~1)
#4 data
#5 Participant ID variable (e.g., group=~id)
#6 Starting values for fixed-effects parameters (e.g., start=c(10,5))
#7 Covariates used for splitting
#8 Model Type ('Fixed', 'Fixed+Ran', 'Fixed+Ran+Res')
#9 Minimum number of participants per node (Nmin)
#10 Criterion (e.g., Change in -2LL, p-value, CV)
# Run NLME
require(nlme)
model.0 = nlme(y~b0i+b1i*time,
data=ex.data.2,
fixed=b0i+b1i~1,
random=b0i+b1i~1,
group=~id,
start=c(10,5))
summary(model.0)
dev.root = -2 * model.0$logLik
lcart.mod1 <- lrp(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
plot(lcart.mod1$rpart_out);text(lcart.mod1$rpart_out)
lrp2Plot(lcart.mod1) # not working
lrp2Plot(lcart.mod1,smooth_method="loess") # not working
lrpTreePlot(lcart.mod1$rpart_out,use.n=F) # not working
lrpTreePlot(lcart.mod1) # not working
library(longRPart2)
lrpTreePlot(lcart.mod1) # not working
plot(lcart.mod1$rpart_out);text(lcart.mod1$rpart_out)
lrpTreePlot(lcart.mod1) # not working
lrpPlot(lcart.mod1)
lrpTreePlot(lcart.mod1) # not working
lrpTreePlot(LONGTREEResults)
lrpPlot(LONGTREEResults)
lrpTreePlot(LONGTREEResults)
lrpTreePlot(lcart.mod1) # not working
lrpTreePlot_gabi = function (model, use.n = TRUE, colors = NULL, place = "bottomright")
{
if(model$method == "nlme"){
indexes = plot(model$rpart_out)
confounding = (length(model$lmeModel$contrasts) > 1)
n = length(model$rpart_out$nodeLines)
t = length(model$rpart_out$levels)
plot(model$rpart_out, ylim = range(indexes$y) - c(diff(range(indexes$y)) *
0.125, 0), xlim = range(indexes$x) + c(-1, 1) * diff(range(indexes$x) *
0.1))
f = model$rpart_out$frame
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
terms = attr(terms(model$nlme.model), "term.labels")
responseName = attr(terms(getResponseFormula(model$nlme.model)),
"term.labels")
timeVar = model$data[, names(model$data) == terms[1]]
continuous = !is.factor(timeVar)
nodes = unique(model$rpart_out$where)
timeValues = unique(timeVar)
plotList = list()
for (i in 1:length(nodes)) {
dat = model$data[model$rpart_out$where == nodes[i], ]
mod = nls(formula = model$nlme.model, data = dat, start = model$start)
####
for(k in 2:length(all.vars(model$nlme.model))){
for(m in ncol(dat):1){
if(all.vars(model$nlme.model)[k] == colnames(dat)[m]){
time.metric = (all.vars(model$nlme.model)[k])
}
}
}
r1 = min(model$data[[time.metric]], na.rm = TRUE)
r2 = max(model$data[[time.metric]], na.rm = TRUE)
x = seq(from = r1, to = r2, length.out = 1000)
new.df <- data.frame(time.metric,x)
colnames(new.df) = c("NON",paste(new.df[1,1]))
new.df[,"NON"] = NULL
pts = list()
pts[[1]] = tapply(predict(mod, new.df), new.df,
mean)
plotList[[i]] = pts
}
plot(model$rpart_out, ylim = range(indexes$y) - c(diff(range(indexes$y)) *
0.125, 0), xlim = range(indexes$x) + c(-1, 1) * diff(range(indexes$x) *
0.1))
subYLim = range(plotList, na.rm = TRUE)
xRange = range(indexes$x)
yRange = range(indexes$y)
if (is.null(colors)) {
colors = rainbow(dim(f)[1], v = 0.9)
}
for (i in 1:length(leaves)) {
limx = indexes$x[leaves[i]] + c(-1, 1) * diff(xRange) *
0.075
limy = indexes$y[leaves[i]] + c(-2, 0) * diff(yRange) *
0.075
rect(limx[1], limy[1], limx[2], limy[2], density = -1,
col = gray(0.9))
for (j in 1:length(plotList[[i]])) {
pts = plotList[[i]][[j]]
pts = (pts - subYLim[1])/(subYLim[2] - subYLim[1])
pts = pts * (limy[2] - limy[1]) + limy[1]
points(x = seq(limx[1], limx[2], length.out = length(pts)),
pts, lwd = 2, type = "l", lty = j, col = colors[i])
}
}
text(model$rpart_out, use.n = use.n)
lineTypes = c("dashed", "dotted", "dotdash", "longdash",
"twodash")
text2 = character()
}
else{
indexes = plot(model$rpart_out)
confounding = (length(model$lmeModel$contrasts) > 1)
n = length(model$rpart_out$nodeLines)
t = length(model$rpart_out$levels)
plot(model$rpart_out, ylim = range(indexes$y) - c(diff(range(indexes$y)) *
0.125, 0), xlim = range(indexes$x) + c(-1, 1) * diff(range(indexes$x) *
0.1))
f = model$rpart_out$frame
leaves = (1:dim(f)[1])[f$var == "<leaf>"]
terms = attr(terms(model$fixedFormula), "term.labels")
responseName = attr(terms(getResponseFormula(model$fixedFormula)),
"term.labels")
timeVar = model$data[, names(model$data) == terms[1]]
continuous = !is.factor(timeVar)
nodes = unique(model$rpart_out$where)
timeValues = unique(timeVar)
plotList = list()
for (i in 1:length(nodes)) {
dat = model$data[model$rpart_out$where == nodes[i], ]
mod = lm(model$fixedFormula, data = dat)
if (length(terms) > 1) {
form = formula(paste(responseName, "~as.numeric(",
terms[1], ")|", paste(terms[-1], sep = " "),
sep = ""))
}
else {
form = formula(paste(responseName, "~as.numeric(",
terms[1], ")", sep = ""))
}
r1 = min(model$data[[terms[1]]], na.rm = TRUE)
r2 = max(model$data[[terms[1]]], na.rm = TRUE)
x = seq(from = r1, to = r2, length.out = 1000)
new.df <- data.frame(terms[1],x)
colnames(new.df) = c("NON",paste(new.df[1,1]))
new.df[,"NON"] = NULL
pts = list()
pts[[1]] = tapply(predict(mod, new.df), new.df,
mean)
plotList[[i]] = pts
}
subYLim = range(plotList, na.rm = TRUE)
xRange = range(indexes$x)
yRange = range(indexes$y)
if (is.null(colors)) {
colors = rainbow(dim(f)[1], v = 0.9)
}
for (i in 1:length(leaves)) {
limx = indexes$x[leaves[i]] + c(-1, 1) * diff(xRange) *
0.075
limy = indexes$y[leaves[i]] + c(-2, 0) * diff(yRange) *
0.075
rect(limx[1], limy[1], limx[2], limy[2], density = -1,
col = gray(0.9))
for (j in 1:length(plotList[[i]])) {
pts = plotList[[i]][[j]]
pts = (pts - subYLim[1])/(subYLim[2] - subYLim[1])
pts = pts * (limy[2] - limy[1]) + limy[1]
points(x = seq(limx[1], limx[2], length.out = length(pts)),
pts, lwd = 2, type = "l", lty = j, col = colors[i])
}
}
text(model$rpart_out, use.n = use.n)
lineTypes = c("dashed", "dotted", "dotdash", "longdash",
"twodash")
text2 = character()
if (length(terms) > 1) {
for (i in 1:length(condLevels)) {
text2 = c(text2, paste(lineTypes[i], "line =", condLevels[[i]][2]))
}
legend(place, legend = text2, pch = 16, col = "black",
bty = "n")
}
}
}
lrpTreePlot_gabi(lcart.mod1)
lrpTreePlot_gabi(LONGTREEResults)
library(longRPart2)
lrpTreePlot(LONGTREEResults)
lrpTreePlot_gabi(lcart.mod1)
library(longRPart2)
setwd("/Users/rjacobuc/Documents/GitHub/longRPart2_scripts")
ECLSK_1000 = read.table("Subset1000_READING_PREDICTORS_AGE.dat",
na.strings = ".")
colnames(ECLSK_1000) = c("CHILDID",
"AGE",
"OCCASION",
"GENDER",
"W1POVRTY",
"RACE",
"P1FIRKDG",
"C1FMOTOR",
"C1GMOTOR",
"T1CONTRO" ,
"T1INTERP",
"T1EXTERN" ,
"T1INTERN",
"READING")
#GENDER 1 is MALE
#RACE: 1 white non-hispanic, 2 black or af. am., 3 hispanic race specified, 4 hispanic race not specified
#Clean data: delete NAs in AGE and READING, and make sure at least ONE predictor has a value.
ECLSK_1000$RACE = as.factor(ECLSK_1000$RACE)
ECLSK_1000_noNA = ECLSK_1000
ECLSK_1000_noNA$age_5 = ECLSK_1000_noNA$AGE-5
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$GENDER),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$W1POVRTY),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1GMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$P1FIRKDG),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1FMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1CONTRO),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERP),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1EXTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$RACE),]
#Split TRAINING vs TESTING
#TRAINING = ECLSK_1000_noNA[0:2500,]
#TESTING = ECLSK_1000_noNA[2501:3061,]
TRAINING = ECLSK_1000_noNA
LONGTREEResults = lrp(method="nlme",
nlme.model=READING~b0i+b1i*(1-exp(-b2*age_5)),
fixedFormula=b0i+b1i+b2~1,
rPartFormula = ~ GENDER + RACE,
group= ~ CHILDID,
randomFormula=b0i+b1i~1,
data=TRAINING,
min.dev=5,
start=c(-2,4,1))
lrp2Plot(LONGTREEResults)
lrp2Plot(LONGTREEResults,smooth_method="gam")
lrp2Plot(LONGTREEResults,smooth_method="loess")
lrp2Plot(LONGTREEResults,smooth_method="gam")
lrp2Plot(LONGTREEResults)#,smooth_method="gam")
rm(list=ls())
library("foreign")
library("dplyr")
library("rpart")
library("rpart.plot")
require("partykit")
require("pROC")
require("caret")
require("party")
