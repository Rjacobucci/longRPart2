print(dev)
}
}
good = rep(0, length(x))
for (i in 1:length(xUnique)) {
good[x == xUnique[i]] = dev[i]
}
good = good[1:(length(good) - 1)]
list(goodness = good + abs(rootDev) * (good != 0) *
2, direction = rep(-1, length(good)))
}
else {
order = rep(0, length(xUnique))
# response = parms[, names(parms) == responseName]  #  -          ----- problem
# for (i in 1:length(xUnique)) {
#   order[i] = mean(response[x == xUnique[i]], na.rm = TRUE)
# }
dir = sort(order, index.return = TRUE)$ix
for (i in 1:(length(dir) - 1)) {
yLeft = y[x %in% dir[1:i]]
yRight = y[x %in% dir[(i + 1):length(dir)]]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
list(goodness = dev + abs(rootDev) * (dev != 0) *
2, direction = dir)
print(list(goodness = dev + abs(rootDev) * (dev != 0) *
2, direction = dir))
}
}
# The init function.  This is used, to the best of my knowledge, to initialize the process.
# summary is used to fill print the report summary(model), and text is used to add text to
# the plot of the tree.
initialize <- function(y,offset,parms=0,wt){
list(
y=y,
parms=parms,
numresp=1,
numy=1,
summary=function(yval,dev,wt,ylevel,digits){paste("deviance (-2logLik)",format(signif(dev),3),"fitt",signif(yval,2))},
text= function(yval,dev,wt,ylevel,digits,n,use.n){
if(!use.n){paste("m:",format(signif(yval,1)))}
else{paste("n:",n)}
}
)
}
model <- list()
model.rpart = rpart(paste(groupingName,c(rPartFormula)),method=list(eval=evaluation,
split=split,init=initialize),control=control,data=data,parms=data)
model$rpart_out <- model.rpart
model
}
nochance = mplus_trees(script.1, ecls.1, group = ~ id,
rPartFormula= ~ gender)
nochance
mplus_trees <- function(script,
data,
rPartFormula,
group= ~ id,
control = rpart.control()){
library(rpart)
# have to have id variable
groupingName = attr(terms(nlme::splitFormula(group,'~')[[1]]),"term.labels")
groupingFactor = data[,names(data)==groupingName]
#    terms = attr(terms(lmeFormula),"term.labels")
# continuous = !is.factor(data[,names(data)==terms[1]])
### The 3 subfunctions necessary for rpart to work.
# The evaluation function.
# Called once per node:
# returns a list of two variables: a label for the node
# and a deviance value for the node.  The deviance is
# of length one, equal to 0 if the node is perfect/ unsplittable
# larger equals worse
evaluation <- function(y, wt, parms){
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
fitt=5
list(label=fitt,deviance=-2*(fit$results$summaries$LL))
}
# The split function, where the work occurs.  This is used to decide
# on the optimal split for a given covariate.
# Called once per split candidate per node
### If the covariate, x, is continuous:
# x variable is ordered
# y is provided in the sort order of x
# returns two vectors of length (n-1)
#      goodness: goodness of the split, with larger numbers better. 0=no split
#      direction: -1 = send y < cutpoint to the left
#                  1 = send y < cutpoint to the right
#
### If x is non-continuous
# x is a set of integers (NOT the original values) defining the
# groups for an unordered predictor.
# Again, return goodness and direction
#      direction: a vector of length m (number of groups), which is the applied
#                 ordering for the unordered categories.  This is done so that
#                 m-1 splits are performed, instead of all possible splits
#      goodness: m-1 values, same idea as before
### pass in the dataset through the parms variable, with subj as y
split <- function(y, wt, x, parms, continuous) {
print(paste("splitting:", length(unique(x)), "values"))
dev = vector()
xUnique = unique(x)
#  rootDev = lme(lmeFormula, data = parms[groupingFactor %in%
#                                           y, ], random = randomFormula, correlation = R,
#                na.action = na.omit)$logLik
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
rootDev = fit$results$summaries$LL
if (continuous) {
for (i in xUnique) {
yLeft = y[x <= i]
yRight = y[x > i]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(99)
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(88)
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
good = rep(0, length(x))
for (i in 1:length(xUnique)) {
good[x == xUnique[i]] = dev[i]
}
good = good[1:(length(good) - 1)]
list(goodness = good + abs(rootDev) * (good != 0) *
2, direction = rep(-1, length(good)))
}
else {
order = rep(0, length(xUnique))
# response = parms[, names(parms) == responseName]  #  -          ----- problem
# for (i in 1:length(xUnique)) {
#   order[i] = mean(response[x == xUnique[i]], na.rm = TRUE)
# }
dir = sort(order, index.return = TRUE)$ix
for (i in 1:(length(dir) - 1)) {
yLeft = y[x %in% dir[1:i]]
yRight = y[x %in% dir[(i + 1):length(dir)]]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
list(goodness = dev + abs(rootDev) * (dev != 0) *
2, direction = dir)
}
}
# The init function.  This is used, to the best of my knowledge, to initialize the process.
# summary is used to fill print the report summary(model), and text is used to add text to
# the plot of the tree.
initialize <- function(y,offset,parms=0,wt){
list(
y=y,
parms=parms,
numresp=1,
numy=1,
summary=function(yval,dev,wt,ylevel,digits){paste("deviance (-2logLik)",format(signif(dev),3),"fitt",signif(yval,2))},
text= function(yval,dev,wt,ylevel,digits,n,use.n){
if(!use.n){paste("m:",format(signif(yval,1)))}
else{paste("n:",n)}
}
)
}
model <- list()
model.rpart = rpart(paste(groupingName,c(rPartFormula)),method=list(eval=evaluation,
split=split,init=initialize),control=control,data=data,parms=data)
model$rpart_out <- model.rpart
model
}
nochance = mplus_trees(script.1, ecls.1, group = ~ id,
rPartFormula= ~ gender)
mplus_trees <- function(script,
data,
rPartFormula,
group= ~ id,
control = rpart.control()){
library(rpart)
# have to have id variable
groupingName = attr(terms(nlme::splitFormula(group,'~')[[1]]),"term.labels")
groupingFactor = data[,names(data)==groupingName]
#    terms = attr(terms(lmeFormula),"term.labels")
# continuous = !is.factor(data[,names(data)==terms[1]])
### The 3 subfunctions necessary for rpart to work.
# The evaluation function.
# Called once per node:
# returns a list of two variables: a label for the node
# and a deviance value for the node.  The deviance is
# of length one, equal to 0 if the node is perfect/ unsplittable
# larger equals worse
evaluation <- function(y, wt, parms){
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
fitt=5
print(-2*(fit$results$summaries$LL))
list(label=fitt,deviance=-2*(fit$results$summaries$LL))
}
# The split function, where the work occurs.  This is used to decide
# on the optimal split for a given covariate.
# Called once per split candidate per node
### If the covariate, x, is continuous:
# x variable is ordered
# y is provided in the sort order of x
# returns two vectors of length (n-1)
#      goodness: goodness of the split, with larger numbers better. 0=no split
#      direction: -1 = send y < cutpoint to the left
#                  1 = send y < cutpoint to the right
#
### If x is non-continuous
# x is a set of integers (NOT the original values) defining the
# groups for an unordered predictor.
# Again, return goodness and direction
#      direction: a vector of length m (number of groups), which is the applied
#                 ordering for the unordered categories.  This is done so that
#                 m-1 splits are performed, instead of all possible splits
#      goodness: m-1 values, same idea as before
### pass in the dataset through the parms variable, with subj as y
split <- function(y, wt, x, parms, continuous) {
print(paste("splitting:", length(unique(x)), "values"))
dev = vector()
xUnique = unique(x)
#  rootDev = lme(lmeFormula, data = parms[groupingFactor %in%
#                                           y, ], random = randomFormula, correlation = R,
#                na.action = na.omit)$logLik
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
rootDev = fit$results$summaries$LL
if (continuous) {
for (i in xUnique) {
yLeft = y[x <= i]
yRight = y[x > i]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(99)
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(88)
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
good = rep(0, length(x))
for (i in 1:length(xUnique)) {
good[x == xUnique[i]] = dev[i]
}
good = good[1:(length(good) - 1)]
list(goodness = good + abs(rootDev) * (good != 0) *
2, direction = rep(-1, length(good)))
}
else {
order = rep(0, length(xUnique))
# response = parms[, names(parms) == responseName]  #  -          ----- problem
# for (i in 1:length(xUnique)) {
#   order[i] = mean(response[x == xUnique[i]], na.rm = TRUE)
# }
dir = sort(order, index.return = TRUE)$ix
for (i in 1:(length(dir) - 1)) {
yLeft = y[x %in% dir[1:i]]
yRight = y[x %in% dir[(i + 1):length(dir)]]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
list(goodness = dev + abs(rootDev) * (dev != 0) *
2, direction = dir)
}
}
# The init function.  This is used, to the best of my knowledge, to initialize the process.
# summary is used to fill print the report summary(model), and text is used to add text to
# the plot of the tree.
initialize <- function(y,offset,parms=0,wt){
list(
y=y,
parms=parms,
numresp=1,
numy=1,
summary=function(yval,dev,wt,ylevel,digits){paste("deviance (-2logLik)",format(signif(dev),3),"fitt",signif(yval,2))},
text= function(yval,dev,wt,ylevel,digits,n,use.n){
if(!use.n){paste("m:",format(signif(yval,1)))}
else{paste("n:",n)}
}
)
}
model <- list()
model.rpart = rpart(paste(groupingName,c(rPartFormula)),method=list(eval=evaluation,
split=split,init=initialize),control=control,data=data,parms=data)
model$rpart_out <- model.rpart
model
}
nochance = mplus_trees(script.1, ecls.1, group = ~ id,
rPartFormula= ~ gender)
195204+194233
nochance
?rpart
mplus_trees <- function(script,
data,
rPartFormula,
group= ~ id,
control = rpart.control()){
library(rpart)
# have to have id variable
groupingName = attr(terms(nlme::splitFormula(group,'~')[[1]]),"term.labels")
groupingFactor = data[,names(data)==groupingName]
#    terms = attr(terms(lmeFormula),"term.labels")
# continuous = !is.factor(data[,names(data)==terms[1]])
### The 3 subfunctions necessary for rpart to work.
# The evaluation function.
# Called once per node:
# returns a list of two variables: a label for the node
# and a deviance value for the node.  The deviance is
# of length one, equal to 0 if the node is perfect/ unsplittable
# larger equals worse
evaluation <- function(y, wt, parms){
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
fitt=5
print(-2*(fit$results$summaries$LL))
list(label=fitt,deviance=-2*(fit$results$summaries$LL))
}
# The split function, where the work occurs.  This is used to decide
# on the optimal split for a given covariate.
# Called once per split candidate per node
### If the covariate, x, is continuous:
# x variable is ordered
# y is provided in the sort order of x
# returns two vectors of length (n-1)
#      goodness: goodness of the split, with larger numbers better. 0=no split
#      direction: -1 = send y < cutpoint to the left
#                  1 = send y < cutpoint to the right
#
### If x is non-continuous
# x is a set of integers (NOT the original values) defining the
# groups for an unordered predictor.
# Again, return goodness and direction
#      direction: a vector of length m (number of groups), which is the applied
#                 ordering for the unordered categories.  This is done so that
#                 m-1 splits are performed, instead of all possible splits
#      goodness: m-1 values, same idea as before
### pass in the dataset through the parms variable, with subj as y
split <- function(y, wt, x, parms, continuous) {
print(paste("splitting:", length(unique(x)), "values"))
dev = vector()
xUnique = unique(x)
#  rootDev = lme(lmeFormula, data = parms[groupingFactor %in%
#                                           y, ], random = randomFormula, correlation = R,
#                na.action = na.omit)$logLik
script$rdata = data=parms[groupingFactor%in%y,]
fit = mplusModeler(script,run=1L,modelout = "Model.1.inp")
rootDev = fit$results$summaries$LL
if (continuous) {
for (i in xUnique) {
yLeft = y[x <= i]
yRight = y[x > i]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
print(777)
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(99)
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
print(88)
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
good = rep(0, length(x))
for (i in 1:length(xUnique)) {
good[x == xUnique[i]] = dev[i]
}
good = good[1:(length(good) - 1)]
list(goodness = good + abs(rootDev) * (good != 0) *
2, direction = rep(-1, length(good)))
}
else {
order = rep(0, length(xUnique))
# response = parms[, names(parms) == responseName]  #  -          ----- problem
# for (i in 1:length(xUnique)) {
#   order[i] = mean(response[x == xUnique[i]], na.rm = TRUE)
# }
dir = sort(order, index.return = TRUE)$ix
for (i in 1:(length(dir) - 1)) {
yLeft = y[x %in% dir[1:i]]
yRight = y[x %in% dir[(i + 1):length(dir)]]
if (length(yLeft) < control$minbucket || length(yRight) <
control$minbucket) {
dev = c(dev, 0)
}
else {
script$rdata = parms[groupingFactor %in%
yLeft, ]
modelLeft = mplusModeler(script,run=1L,modelout = "Model.1.inp")
script$rdata = parms[groupingFactor %in%
yRight, ]
modelRight = mplusModeler(script,run=1L,modelout = "Model.1.inp")
dev = c(dev, modelLeft$results$summaries$LL + modelRight$results$summaries$LL)
}
}
list(goodness = dev + abs(rootDev) * (dev != 0) *
2, direction = dir)
}
}
# The init function.  This is used, to the best of my knowledge, to initialize the process.
# summary is used to fill print the report summary(model), and text is used to add text to
# the plot of the tree.
initialize <- function(y,offset,parms=0,wt){
list(
y=y,
parms=parms,
numresp=1,
numy=1,
summary=function(yval,dev,wt,ylevel,digits){paste("deviance (-2logLik)",format(signif(dev),3),"fitt",signif(yval,2))},
text= function(yval,dev,wt,ylevel,digits,n,use.n){
if(!use.n){paste("m:",format(signif(yval,1)))}
else{paste("n:",n)}
}
)
}
model <- list()
model.rpart = rpart(paste(groupingName,c(rPartFormula)),method=list(eval=evaluation,
split=split,init=initialize),control=control,data=data,parms=data)
model$rpart_out <- model.rpart
model
}
nochance = mplus_trees(script.1, ecls.1, group = ~ id,
rPartFormula= ~ gender,control=rpart.control(cp=.00001))
nochance
ECLSK_1000 = read.table("Subset1000_READING_PREDICTORS_AGE.dat",
na.strings = ".")
colnames(ECLSK_1000) = c("CHILDID",
"AGE",
"OCCASION",
"GENDER",
"W1POVRTY",
"RACE",
"P1FIRKDG",
"C1FMOTOR",
"C1GMOTOR",
"T1CONTRO" ,
"T1INTERP",
"T1EXTERN" ,
"T1INTERN",
"READING")
#GENDER 1 is MALE
#RACE: 1 white non-hispanic, 2 black or af. am., 3 hispanic race specified, 4 hispanic race not specified
#Clean data: delete NAs in AGE and READING, and make sure at least ONE predictor has a value.
ECLSK_1000$RACE = as.factor(ECLSK_1000$RACE)
ECLSK_1000_noNA = ECLSK_1000
ECLSK_1000_noNA$age_5 = ECLSK_1000_noNA$AGE-5
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$GENDER),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$W1POVRTY),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1GMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$P1FIRKDG),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$C1FMOTOR),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1CONTRO),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERP),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1EXTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$T1INTERN),]
ECLSK_1000_noNA = ECLSK_1000_noNA[!is.na(ECLSK_1000_noNA$RACE),]
26000/60
install.packages("formula.tools")
library(longRPart2)
library(longRPart2)
library(longRPart2)
