#3 random-effect parameters (e.g., random=b0i+b1i~1)
#4 data
#5 Participant ID variable (e.g., group=~id)
#6 Starting values for fixed-effects parameters (e.g., start=c(10,5))
#7 Covariates used for splitting
#8 Model Type ('Fixed', 'Fixed+Ran', 'Fixed+Ran+Res')
#9 Minimum number of participants per node (Nmin)
#10 Criterion (e.g., Change in -2LL, p-value, CV)
# Run NLME
require(nlme)
model.0 = nlme(y~b0i+b1i*time,
data=ex.data.2,
fixed=b0i+b1i~1,
random=b0i+b1i~1,
group=~id,
start=c(10,5))
summary(model.0)
?longRPart2
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2)
head(ex.data.2)
summary(ex.data.2)
method="nlme"
nlme.model=y~b0i+b1i*time
fixedFormula=b0i+b1i~1
rPartFormula = ~ z
randomFormula=b0i+b1i~1
data=ex.data.2
if(method=="lme"){
lmeFormula <- fixedFormula
}
groupingName = attr(terms(splitFormula(randomFormula,'|')[[2]]),"term.labels")
splitFormula(randomFormula,'|')
randomFormula
attr(terms(splitFormula(randomFormula,'~')[[2]]),"term.labels")
splitFormula(randomFormula,'~')
randomFormula=~1|id
attr(terms(splitFormula(randomFormula,'~')[[2]])
splitFormula(randomFormula,'~')
attr(terms(splitFormula(randomFormula,'~')[[2]]),"term.labels")
groupingName = attr(terms(splitFormula(randomFormula,'|')[[2]]),"term.labels")
randomFormula=b0i+b1i~1
attr(terms(splitFormula(randomFormula,'~')[[2]]),"term.labels")
splitFormula(randomFormula,'~')
randomFormula=~1|id
attr(terms(splitFormula(randomFormula,'|')[[2]]),"term.labels")
randomFormula=b0i+b1i~1
splitFormula(randomFormula,'~')
?splitFormula
formula(randomFormula)
model.0$coefficients
lcart.mod1
attr(terms(getResponseFormula(nlmeFormula)),"term.labels")
responseName = attr(terms(getResponseFormula(nlme.model)),"term.labels")
responseName
groupingFactor = data[,names(data)=="1"]
?parms
fixedFormula=verbal ~ grade
lmeFormula <- fixedFormula
attr(terms(lmeFormula),"term.labels")
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2)
?nlme
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
method="nlme"
nlme.model=y~b0i+b1i*time
fixedFormula=b0i+b1i~1
rPartFormula = ~ z
randomFormula=b0i+b1i~1
data=ex.data.2
start=c(10,5)
responseName = attr(terms(getResponseFormula(nlme.model)),"term.labels")
groupingFactor = data[,names(data)=="1"]
evaluation <- function(y, wt, parms){
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
# try not returning slope -- may be only for plotting
slope=1
list(label=slope,deviance=-2*(model$logLik))# ,pars=model$coefficients$fixed
}
print(paste("splitting:",length(unique(x)),"values"))
split <- function(y, wt, x, parms, continuous){
print(paste("splitting:",length(unique(x)),"values"))
dev = vector()
xUnique = unique(x)
if(method=="lme"){
rootDev = lme(lmeFormula,data=parms[groupingFactor%in%y,],random=randomFormula,correlation=R,na.action=na.omit)$logLik
}else if(method=="nlme"){
rootDev = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)$logLik
}
#
# for continuous variables
#
if(continuous){
# need to find splits for the UNIQUE values of x
# no point in recalculating splits for the
# same age/height/etc...
for(i in xUnique){
yLeft = y[x<=i]
yRight = y[x>i]
# build the models only if the split created satisfies the minbucket.
# could add other split controls later
if(length(yLeft) < control$minbucket || length(yRight) < control$minbucket){
dev = c(dev,0)
}
else{
if(method=="lme"){
modelLeft = try(lme(lmeFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit),silent=TRUE)
modelRight = try(lme(lmeFormula,data=parms[groupingFactor%in%yRight,],
random=randomFormula,correlation=R,na.action=na.omit),silent=TRUE)
}else if(method=="nlme"){
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelRight = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yRight,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
}
if(any(class(modelLeft)=='lme') | any(class(modelLeft)=='nlme') &&
any(class(modelRight)=='lme') | any(class(modelRight)=='nlme')){
dev = c(dev,modelLeft$logLik+modelRight$logLik)
}
else{
dev = c(dev,0)
}
}
}
# need to duplicate the observations for duplicate values of x
good = rep(0,length(x))
for(i in 1:length(xUnique)){
good[x==xUnique[i]]=dev[i]
}
good = good[1:(length(good)-1)]
list(goodness=good+abs(rootDev)*(good!=0)*2,direction=rep(-1,length(good)))
}
#
###for categorical variables
#
else{
order = rep(0,length(xUnique))
response = parms[,names(parms)==responseName]
# establishing the ordering
for(i in 1:length(xUnique)){
order[i] = mean(response[x==xUnique[i]],na.rm=TRUE)
}
dir = sort(order,index.return=TRUE)$ix
# testing the direction
for(i in 1:(length(dir)-1)){
yLeft = y[x%in%dir[1:i]]
yRight = y[x%in%dir[(i+1):length(dir)]]
# build the models only if the split created satisfies the minbucket.
# could add other split controls later
if(length(yLeft) < control$minbucket || length(yRight) < control$minbucket){
dev = c(dev,0)
}
else{
if(method=="lme"){
modelLeft = try(lme(lmeFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit),silent=TRUE)
modelRight = try(lme(lmeFormula,data=parms[groupingFactor%in%yRight,],
random=randomFormula,correlation=R,na.action=na.omit),silent=TRUE)
}else if(method=="nlme"){
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelRight = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yRight,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
}
if(any(class(modelLeft)=='lme') | any(class(modelLeft)=='nlme') &&
any(class(modelRight)=='lme') | any(class(modelRight)=='nlme')){
dev = c(dev,modelLeft$logLik+modelRight$logLik)
}
else{
dev = c(dev,0)
}
}
}
list(goodness=dev+abs(rootDev)*(dev!=0)*2,direction=dir)
}
}
initialize <- function(y,offset,parms=0,wt){
list(
y=y,
parms=parms,
numresp=1,
numy=1,
summary=function(yval,dev,wt,ylevel,digits){paste("deviance (-2logLik)",format(signif(dev),3),"slope",signif(yval,2))},
text= function(yval,dev,wt,ylevel,digits,n,use.n){
if(!use.n){paste("m:",format(signif(yval,1)))}
else{paste("n:",n)}
}
)
}
model = rpart(paste(groupingName,c(rPartFormula)),method=list(eval=evaluation,
split=split,init=initialize),control=control,data=data,parms=data)
groupingFactor
names(data)=="1"
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
data[,names(data)=="id"]
names(data)
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
data[,names(data)=="id"]%in%c(1,2,3,4)
groupingFactor%in%yLeft
yLeft = y
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelLeft
parms=data
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelLeft
R=NULL
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelLeft
parms[groupingFactor%in%yLeft,]
groupingFactor
groupingFactor = data[,names(data)=="id"]
groupingFactor
modelLeft = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yLeft,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelRight = try(nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%yRight,],
random=randomFormula,correlation=R,na.action=na.omit,start=start),silent=TRUE)
modelLeft
parms[groupingFactor%in%yLeft,]
groupingFactor
yLeft
fixedFormula=verbal ~ grade
rPartFormula = ~ Moeducat
randomFormula=~1|id
data=wisc.long
lmeFormula <- fixedFormula
groupingName = attr(terms(splitFormula(randomFormula,'|')[[2]]),"term.labels")
responseName = attr(terms(getResponseFormula(lmeFormula)),"term.labels")
groupingFactor = data[,names(data)==groupingName]
groupingFactor
groupingName
names(data)=="id"
groupingFactor = data[,names(data)=="id"]
method="nlme"
nlme.model=y~b0i+b1i*time
fixedFormula=b0i+b1i~1
rPartFormula = ~ z
randomFormula=b0i+b1i~1
data=ex.data.2
start=c(10,5)
responseName = attr(terms(getResponseFormula(nlme.model)),"term.labels")
groupingFactor = data[,names(data)=="id"]
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
parms[groupingFactor%in%y,]
responseName = attr(terms(getResponseFormula(nlme.model)),"term.labels")
groupingFactor = data[,names(data)=="id"]
groupingFactor
y
parms[groupingFactor%in%y,]
parms=data
parms[groupingFactor%in%y,]
parms
y=data
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
data=parms[groupingFactor%in%y,]
data
data=ex.data.2
y="id"
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
parms[groupingFactor%in%y,]
y
groupingFactor
y=data$id
parms[groupingFactor%in%y,]
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
fixedFormula
nlme.model
head(parms[groupingFactor%in%y,])
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
?nlme
group=~id
splitFormula(group)
splitFormula(group)[[2]]
attr(terms(splitFormula(group,'~')[[2]]),"term.labels")
splitFormula(group,'~')
attr(terms(splitFormula(group,'~')[[1]]),"term.labels")
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
groupingName = attr(terms(splitFormula(group,'~')[[1]]),"term.labels")
responseName = attr(terms(getResponseFormula(nlme.model)),"term.labels")
groupingFactor = data[,names(data)==groupingName]
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start)
parms[groupingFactor%in%y,]
model = nlme(model=nlme.model,fixed=fixedFormula,data=parms[groupingFactor%in%y,],
random=randomFormula,correlation=R,na.action=na.omit,start=start,group=group)
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
install.packages("formula.tools")
library(longRPart2)
Data Generation
z = runif(200, 0, 10)
b0i = matrix(NA,200,1)
b1i = matrix(NA,200,1)
y = matrix(NA,200,6)
id = matrix(NA,200,1)
beta_0 = matrix(NA,200,1)
beta_1 = matrix(NA,200,1)
psi2_0 = matrix(NA,200,1)
psi2_1 = matrix(NA,200,1)
sigma2_u = matrix(NA,200,1)
for(i in 1:200){
if (z[i] > 5) {beta_0[i]   = 10}  else {beta_0[i]   = 20}
if (z[i] > 5) {beta_1[i]   = 10}  else {beta_1[i]   = 5}
if (z[i] > 5) {psi2_0[i]   = 100} else {psi2_0[i]   = 64}
if (z[i] > 5) {psi2_1[i]   = 25}  else {psi2_1[i]   = 16}
if (z[i] > 5) {sigma2_u[i] = 4}   else {sigma2_u[i] = 4}
b0i[i] = beta_0[i] + rnorm(1,0,sqrt(psi2_0[i]))
b1i[i] = beta_1[i] + rnorm(1,0,sqrt(psi2_1[i]))
id[i] = i
for(t in 1:6){
y[i,t] = b0i[i] + b1i[i] * (t - 1)/5 + rnorm(1,0,sqrt(sigma2_u))
}
}
ex.data.1 = as.data.frame(cbind(id,y,z))
names(ex.data.1)= c('id','y1','y2','y3','y4','y5','y6','z')
head(ex.data.1)
# Convert to Long Form
ex.data.2 = reshape(ex.data.1, idvar='id',
varying=c('y1','y2','y3','y4','y5','y6'),
times=c(0,1,2,3,4,5),
v.names='y', direction='long')
ex.data.2 = ex.data.2[order(ex.data.2$id, ex.data.2$time),]
head(ex.data.2)
### Beginning of what package would be
## Things to Specify
#1 longitudinal model (e.g., y~b0i+b1i*(time/5))
#2 fixed-effect parameters (e.g., fixed=b0i+b1i~1)
#3 random-effect parameters (e.g., random=b0i+b1i~1)
#4 data
#5 Participant ID variable (e.g., group=~id)
#6 Starting values for fixed-effects parameters (e.g., start=c(10,5))
#7 Covariates used for splitting
#8 Model Type ('Fixed', 'Fixed+Ran', 'Fixed+Ran+Res')
#9 Minimum number of participants per node (Nmin)
#10 Criterion (e.g., Change in -2LL, p-value, CV)
# Run NLME
require(nlme)
model.0 = nlme(y~b0i+b1i*time,
data=ex.data.2,
fixed=b0i+b1i~1,
random=b0i+b1i~1,
group=~id,
start=c(10,5))
summary(model.0)
dev.root = -2 * model.0$logLik
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
str(lcart.mod1)
lcart.mod1$where
plot(lcart.mod1);text(lcart.mod1)
lcart.mod1$where
str(lcart.mod1)
length(table(lcart.mod1$where)
length(table(lcart.mod1$where))
lcart.mod1$where
table(lcart.mod1$where)
j=1
table(lcart.mod1$where)[j]
table(lcart.mod1$where)[j][1]
table(lcart.mod1$where)[j]==lcart.mod1$where
table(lcart.mod1$where)[j]
table(lcart.mod1$where)
names(table(lcart.mod1$where))[j]==lcart.mod1$where
summary(model.0)
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
lcart.mod1$params.nlme
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
lcart.mod1$params.nlme
params(model.0)
parameters(model.0)
coef(model.0)
lcart.mod1$params.nlme
lcart.mod1$rpart_out
model.rpart$where
table(model.rpart$where)
table(lcart.mod1$rpart_out$where)
names(table(lcart.mod1$rpart_out$where))
as.numeric(names(table(lcart.mod1$rpart_out$where)))
library(longRPart2)
lcart.mod1 <- longRPart2(method="nlme",
nlme.model=y~b0i+b1i*time,
fixedFormula=b0i+b1i~1,
rPartFormula = ~ z,
group= ~ id,
randomFormula=b0i+b1i~1,
data=ex.data.2,
start=c(10,5))
lcart.mod1$params.nlme
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
plot.longrpart2(lcart.mod1)
plot(lcart.mod1)
load("C:/Users/jacobucc/Downloads/longrpart2 test models.RData")
plot(lcart.mod1)
plot.longrpart2(lcart.mod1)
lrp2plot(lcart.mod1)
library(longRPart2)
library(longRPart2)
library(longRPart2)
library(longRPart2)
?rhs.vars
library(nlme)
?rhs.vars
install.packages("formula.tools")
library(longRPart2)
install.packages("ggplot2")
library(longRPart2)
library(longRPart2)
library(longRPart2)
lrp2Plot(lcart.mod1)
summary(lcart.mod1)
lcart.mod1
lrpTreePlot(lcart.mod1$rpart_out,use.n=F) # not working
lrpPlot(lcart.mod1) # not working
plot(lcart.mod1$rpart_out);text(lcart.mod1$rpart_out)
lcart.mod1$rpart_out
for(j in 1:length(table(lcart.mod1$where))){
id <- names(table(lcart.mod1$where))[j]==lcart.mod1$where
}
as.numeric(names(table(lcart.mod1$rpart_out$where)))
lcart.mod1$params.nlme
lcart.mod1$summary
lrp2Plot(lcart.mod2)
lrp2Plot(lcart.mod1)
