{
    "collab_server" : "",
    "contents" : "#' Plot the tree\n#'\n#' @param model Model object from longRPart2()\n#' @param use.n Print N in each node\n#' @param colors Colors to use\n#' @param place Where to place the plot\n#' @export\n\nlrpTreePlot <- function(model,use.n=TRUE,colors=NULL,place=\"bottomright\"){\n  indexes = plot(model)\n  confounding = (length(model$lmeModel$contrasts)>1)\n  n = length(model$rpart_out$nodeLines)\n  t = length(model$rpart_out$levels)\n  plot(model,ylim=range(indexes$y)-c(diff(range(indexes$y))*.125,0),xlim=range(indexes$x)+c(-1,1)*diff(range(indexes$x)*.1))\n  f = model$rpart_out$frame\n  leaves = (1:dim(f)[1])[f$var==\"<leaf>\"]\n  terms = attr(terms(model$lmeFormula),\"term.labels\")\n  timeVar = model$data[,names(model$data)==terms[1]]\n  responseName = attr(terms(getResponseFormula(model$lmeFormula)),\"term.labels\")\n  continuous = !is.factor(timeVar)\n  nodes = unique(model$rpart_out$where)\n  timeValues = unique(timeVar)\n  # need to come up with the plotting range here\n  # plot(0,type='n',xlab='',ylab='',main='',xlim=c(1,8),ylim=c(0,110))\n  plotList = list()\n  for(i in 1:length(nodes)){\n    dat=model$data[model$rpart_out$where==nodes[i],]\n    mod = lme(model$lmeFormula,data=dat,random=model$randomFormula,correlation=model$R,na.action=na.omit)\n    if(length(terms)>1){\n      form = formula(paste(responseName,'~as.numeric(',terms[1],')|',paste(terms[-1],sep='\\ '),sep=''))\n    }\n    else{\n      form = formula(paste(responseName,'~as.numeric(',terms[1],')',sep=''))\n    }\n    plotDat = plot(mod,form)\n    condLevels = plotDat$condlevels\n    pts = list()\n    for(j in 1:length(plotDat$panel.args)){\n      pts[[j]] = tapply(plotDat$panel.args[[j]]$y,plotDat$panel.args[[j]]$x,mean)\n    }\n    plotList[[i]]=pts\n  }\n  subYLim = range(plotList,na.rm=TRUE)\n  xRange = range(indexes$x)\n  yRange = range(indexes$y)\n  if(is.null(colors)){\n    colors = rainbow(dim(f)[1],v=0.9)\n  }\n  for(i in 1:length(leaves)){\n    limx = indexes$x[leaves[i]]+c(-1,1)*diff(xRange)*.075\n    limy = indexes$y[leaves[i]]+c(-2,0)*diff(yRange)*.075\n    rect(limx[1],limy[1],limx[2],limy[2],density=-1,col=gray(0.9))\n    for(j in 1:length(plotList[[i]])){\n      pts = plotList[[i]][[j]]\n      pts = (pts - subYLim[1])/(subYLim[2]-subYLim[1])\n      pts = pts*(limy[2]-limy[1])+limy[1]\n      points(x=seq(limx[1],limx[2],length.out=length(pts)),pts,lwd=2,type='l',lty=j,col=colors[i])\n    }\n  }\n  text(model,use.n=use.n)\n  lineTypes = c(\"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\")\n  text2 = character()\n  if(length(terms)>1){\n    for(i in 1:length(condLevels)){\n      text2=c(text2,paste(lineTypes[i],\"line =\",condLevels[[i]][2]))\n    }\n    legend(place,legend=text2,pch=16,col='black',bty='n')\n  }\n\n\n}\n",
    "created" : 1488240946719.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2823818278",
    "id" : "BB8B75AF",
    "lastKnownWriteTime" : 1488220069,
    "last_content_update" : 1488220069,
    "path" : "~/GitHub/longRPart2/R/lrpTreePlot.R",
    "project_path" : "R/lrpTreePlot.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}